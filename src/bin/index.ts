#!/usr/bin/env node

import * as fs from 'fs';
import * as path from 'path';

// Caminho correto para a pasta de origem dos arquivos SCSS
const sourceDir: string = path.join(__dirname, '../sass');

// Caminho onde os arquivos ser√£o copiados (no projeto de destino)
const projectSrcDir: string = path.resolve(process.cwd(), './src');
const targetDir: string = path.join(projectSrcDir, 'sass');

/**
 * Fun√ß√£o para copiar arquivos e diret√≥rios recursivamente.
 * @param srcDir Diret√≥rio de origem
 * @param destDir Diret√≥rio de destino
 */
function copyFiles(srcDir: string, destDir: string): void {
  if (!fs.existsSync(srcDir)) {
    console.error(`‚ùå Diret√≥rio de origem n√£o encontrado: ${srcDir}`);
    process.exit(1); // Sai do processo com erro
  }

  if (!fs.existsSync(destDir)) {
    fs.mkdirSync(destDir, { recursive: true }); // Cria o diret√≥rio se n√£o existir
  }

  fs.readdirSync(srcDir).forEach((file: string) => {
    const srcPath: string = path.join(srcDir, file);
    const destPath: string = path.join(destDir, file);

    const stat = fs.statSync(srcPath); // Verifica se √© arquivo ou diret√≥rio
    if (stat.isDirectory()) {
      // Se for diret√≥rio, chama recursivamente
      copyFiles(srcPath, destPath);
    } else {
      // Se for arquivo, copia
      fs.copyFileSync(srcPath, destPath);
      console.log(`‚úîÔ∏è  Copiado: ${file}`);
    }
  });
}

// Executa a c√≥pia
if (!fs.existsSync(projectSrcDir)) {
  console.error(`‚ùå A pasta 'src' n√£o foi encontrada no diret√≥rio atual: ${process.cwd()}`);
  process.exit(1); // Sai do processo com erro
}

console.log('üìÇ Copiando arquivos SCSS para a pasta src/styles...');
copyFiles(sourceDir, targetDir);
console.log('‚úÖ Arquivos SCSS copiados com sucesso!');
